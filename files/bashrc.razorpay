#!/bin/sh
#
# Company related things, that can probably be removed or repurposed when I leave, go here.

# Terminal jump
alias razorpay='cd ~/workplace/razorpay'
alias api='cd ~/workplace/razorpay/api'
alias dashboard='cd ~/workplace/razorpay/dashboard'
alias subscriptions='cd ~/workplace/razorpay/subscriptions'
alias docs='cd ~/workplace/razorpay/docs'
alias crons='cd ~/workplace/razorpay/cron'

# Gogogo
alias gocodebase='cd ~/workplace/razorpay/api; sublime .;'

# CLI
alias tinker='api; php artisan tinker;'

# PHPUNIT
alias pufilt="phpunit --debug --verbose --filter"
alias pustop="phpunit --debug --verbose --stop-on-failure --stop-on-error --filter"

#
ulimit -S -n 2700

# RZP Entities
#
# Usage:
# merc 8iMbVsEnv1HCo0
function merc() {
  open "https://admin-dashboard.razorpay.com/admin/entity/merchant/live/$1"
}
# Usage:
# pay pay_9FBg7zvrIUTynB
# pay 9FBg7zvrIUTynB
function pay() {
  open "https://admin-dashboard.razorpay.com/admin/entity/payment/live/$1"
}
# Usage:
# See all refunds
# rzp refund
#
# See specific refund
# rzp refund rfnd_9FBg71aeZmprMm
# rzp refund 9FBg71aeZmprMm
#
# Query refunds by payment_id
# rzp refund p pay_836xKi6tq0swau
#
# Query refunds by merchant_id
# rzp refund m 5ubLZpACTmD8D4
function rzp() {
  if [[ $# -eq 2 ]]
  then
    open "https://admin-dashboard.razorpay.com/admin/entity/$1/live/$2"
  elif [[ $# -eq 3 ]]
  then
    query='merchant_id'
    case "$2" in

      'p') query='payment_id'
           ;;

      'e') query='entity_id'
           ;;

      '*') query='merchant_id'
           ;;
    esac
    open "https://admin-dashboard.razorpay.com/admin/entities/live/$1?$query=$3"
  else
    open "https://admin-dashboard.razorpay.com/admin/entities/live/$1"
  fi
}
# In case dashboard is reverted:
# function merc() {
#   open "https://admin-dashboard.razorpay.com/admin#/app/entity/live/merchant/$1"
# }
# function pay() {
#   open "https://admin-dashboard.razorpay.com/admin#/app/payments/live/$1"
# }
# function rzp() {
#   open "https://admin-dashboard.razorpay.com/admin#/app/entity/live/$1/$2"
# }


function splunk() {
  open "https://splunk-mumbai.razorpay.com/en-US/app/search/search?q=search%20$1&earliest=-30d%40d&latest=now"
}

# Usage:
# zen 131947
function zen() {
  open "https://razorpay.zendesk.com/agent/tickets/$1"
}

function listen_for_builds() {
  LISTEN_BRANCH=$1
  directory=${PWD##*/}
  case "$directory" in
    'api') listen_for_wercker_build $LISTEN_BRANCH; listen_for_drone_build $LISTEN_BRANCH
          ;;

    'subscriptions') listen_for_drone_build $LISTEN_BRANCH
          ;;
  esac
}

#
# Notification and link for wercker pipelines
#
# Usage:
# werck_me_up $runId
# werck_me_up 5a54102cf591740001529c4d
#
# Dependency:
# Needs terminal-notifier for pretty notifications.
# You can still use Applescript without it, but what's the point, just keep refreshing the tab na then.
#
function werck_me_up() {
  while : ;
  do
    response=$(curl -s -H "Authorization: Bearer $WERCKER_TOKEN" https://app.wercker.com/api/v3/runs/$1)
    echo $response | jq -r '.status' | grep -q finished
    [[ $? -ne 0 ]] || break
    sleep 10
  done

  result=$(echo $response | jq -r '.result')
  branch=$(echo $response | jq -r '.branch')
  pipeline=$(echo $response | jq -r '.pipeline.name')
  url="https://app.wercker.com/Razorpay/api/runs/build/$1"
  icon="https://raw.githubusercontent.com/wantedly/step-pretty-slack-notify/master/icons/$result.jpg"

  # Needs terminal-notifier
  terminal-notifier -message "Pipeline: $pipeline Branch: $branch" \
                    -title "$result!" \
                    -open "$url" \
                    -sound Ping \
                    -appIcon $icon

  # Applescript alternative, no link, no icon, and a stupid sound
  # osascript -e "display notification \"Pipeline $result\" with title \"$result!\""
}

#
# Takes branch name as argument and starts a
# background process to poll wercker for status
#
# Useful to attach at the end of your `git push`
# alias so you don't have to type it each time.
# See `gpo`
#
# Usage:
# listen_for_wercker_build branch_name
function listen_for_wercker_build() {
  directory=${PWD##*/}
  if [[ $directory != 'api' ]]
  then
    return
  fi
  sleep 1
  response=$(curl -G -s -X GET \
                   -H "Authorization: Bearer $WERCKER_TOKEN" \
                   -d "pipelineId=$WERCKER_BUILD_PIPELINE_ID" \
                   -d "result=unknown" \
                   -d "branch=$1" \
                   -d "limit=1" \
                   "https://app.wercker.com/api/v3/runs")
  wercker_run_id=$(echo $response | jq -r '.[0].id')
  echo -n "Tracking wercker pipeline: "
  echo $wercker_run_id
  werck_me_up $wercker_run_id &
}

#
# Notification and link for drone pipelines
#
# Usage:
# drone_alert $BUILD_NUM
# drone_alert 140
#
# Dependency:
# Needs terminal-notifier for pretty notifications.
# You can still use Applescript without it, but what's the point, just keep refreshing the tab na then.
#
function drone_alert() {
  directory=${PWD##*/}
  while : ;
  do
    response=$(drone build info razorpay/$directory $1)
    echo $response | grep 'Status' | grep -qv 'running'
    [[ $? -ne 0 ]] || break
    sleep 10
  done

  result=$(echo $response | cut -d ' ' -f 4 | tr -d '\n')
  branch=$(echo $response | cut -d ' ' -f 10 | tr -d '\n')
  pipeline=$(echo $response | cut -d ' ' -f 6 | tr -d '\n')
  url="https://drone.razorpay.com/razorpay/$directory/$1"
  case "$result" in
    'success') result='passed'
          ;;

    'failure') result='failed'
          ;;
  esac
  icon="https://raw.githubusercontent.com/wantedly/step-pretty-slack-notify/master/icons/$result.jpg"

  # Needs terminal-notifier
  terminal-notifier -message "Pipeline: $pipeline Branch: $branch" \
                    -title "$result!" \
                    -open "$url" \
                    -sound Ping \
                    -appIcon $icon

  # Applescript alternative, no link, no icon, and a stupid sound
  # osascript -e "display notification \"Pipeline $result\" with title \"$result!\""
}

#
# Takes branch name as argument and starts a
# background process to poll drone for status
#
# Useful to attach at the end of your `git push`
# alias so you don't have to type it each time.
# See `gpo`
#
# Usage:
# listen_for_wercker_build branch_name
function listen_for_drone_build() {
  directory=${PWD##*/}
  if [[ $directory != 'api' && $directory != 'subscriptions' ]]
  then
    echo 'Listening not available for this directory.'
    return
  fi
  sleep 3
  BUILD_NUM=$(drone build ls razorpay/$directory --branch $1 | head -n 1 | cut -b 13-)
  echo -n "Tracking drone build: "
  echo $BUILD_NUM
  drone_alert $BUILD_NUM &
}

function deploy() {
  curl -s -X POST \
     -H "Authorization: Bearer $WERCKER_TOKEN" \
     -H "Content-Type: application/json" \
     -d "{\"pipelineId\":\"$WERCKER_PROD_API_PIPELINE_ID\",\"sourceRunId\":\"$1\"}" \
     "https://app.wercker.com/api/v3/runs" | jq
}
function canary() {
  curl -s -X POST \
     -H "Authorization: Bearer $WERCKER_TOKEN" \
     -H "Content-Type: application/json" \
     -d "{\"pipelineId\":\"$WERCKER_PROD_API_CANARY_PIPELINE_ID\",\"sourceRunId\":\"$1\"}" \
     "https://app.wercker.com/api/v3/runs" | jq
}
function beta() {
  curl -s -X POST \
     -H "Authorization: Bearer $WERCKER_TOKEN" \
     -H "Content-Type: application/json" \
     -d "{\"pipelineId\":\"$WERCKER_BETA_API_PIPELINE_ID\",\"sourceRunId\":\"$1\"}" \
     "https://app.wercker.com/api/v3/runs" | jq
}
function charlie() {
  curl -s -X POST \
     -H "Authorization: Bearer $WERCKER_TOKEN" \
     -H "Content-Type: application/json" \
     -d "{\"pipelineId\":\"$WERCKER_CHARLIE_API_PIPELINE_ID\",\"sourceRunId\":\"$1\"}" \
     "https://app.wercker.com/api/v3/runs" | jq
}
function dark() {
  curl -s -X POST \
     -H "Authorization: Bearer $WERCKER_TOKEN" \
     -H "Content-Type: application/json" \
     -d "{\"pipelineId\":\"$WERCKER_DARK_API_PIPELINE_ID\",\"sourceRunId\":\"$1\"}" \
     "https://app.wercker.com/api/v3/runs" | jq
}

function redash() {
  curl -s -G -O -X GET \
    -d "api_key=$REDASH_TOKEN" \
    "https://redash.razorpay.com/api/queries/$1/results.xlsx"
}

function pucov() {
  # echo "Removing old coverage directory."
  # confirm && rm -rf coverage/
  xdebug_ini=/usr/local/etc/php/7.0/conf.d/ext-xdebug.ini
  commented=$(cat $xdebug_ini | tail -n 1 | cut -c1)
  if [ $commented == ';' ]
  then
    echo "ERROR: xdebug isn't enabled here: $xdebug_ini"
    echo 'Want to enable now?'
    confirm && sublime_wait $xdebug_ini
    if [ $? == 1 ]
    then
      return
    fi
  else
    echo "xdebug is enabled, good: $xdebug_ini"
  fi
  phpunit --coverage-html coverage/ --debug --verbose --filter $1
  open coverage/index.html
}

# Makes it easier to call heroku for winky
function winky() {
  heroku $* --app rzp-hubot
}

# Clears all logged info in razorpay/api
function clear_log() {
  rm /Users/harmansingh/workplace/razorpay/api/storage/logs/localhost-trace-*.log
  rm /Users/harmansingh/workplace/razorpay/subscriptions/storage/logs/*-trace.log
  > /Users/harmansingh/workplace/razorpay/api/storage/logs/laravel.log
  > /Users/harmansingh/workplace/razorpay/api/storage/logs/cron.log
  > /Users/harmansingh/workplace/razorpay/api/storage/logs/instance.json
}

alias clear_cache="redis-cli flushall"

# Checks if Rzp Api is serving the same commit consistently
function rzp_api_check() {
  if [[ $# -eq 0 ]]
  then
    limit=10
  else
    limit=$1
  fi
  first_commit=$(curl -s https://api.razorpay.com/commit.txt)
  observed_commits=($first_commit)
  for ((n=0;n<$limit;n++))
  do
    new_commit=$(curl -s https://api.razorpay.com/commit.txt)
    array_contains $new_commit "${observed_commits[@]}"
    if [[ "$?" != 0 ]]
    then
      observed_commits+=($new_commit)
    fi
  done
  echo "Tried $limit times. Got the following commits:"
  printf "%s\n" "${observed_commits[@]}"
}

#
# See a file on Github master
# Useful for sharing code on Slack
#
# Usage:
# rzp_master app/Services/ApiServiceProvider.php
function rzp_master() {
  open "https://github.com/razorpay/api/blob/master/$1"
}

#
# See a commit on Github
# Useful for checking the circumstances under which a commit was made
# TODO: Probably useful to see the PR too, will need to add that.
#
# Usage:
# rzp_commit 8749d752a41
function rzp_commit() {
  open "https://github.com/razorpay/api/commit/$1"
}

#
# Open all (seemingly) useful Jira dashboards
#
# Jira is stupid and complex and sometimes you just need to
# see every possible dashboard to get what you want
function jira() {
  # Useful for: Planning
  open "https://razorpay.atlassian.net/secure/RapidBoard.jspa?rapidView=23&projectKey=GL&view=planning&quickFilter=45"
  # Useful for: Updating issue status and logging work
  open "https://razorpay.atlassian.net/secure/RapidBoard.jspa?rapidView=23&projectKey=GL&quickFilter=45"
  # Useful for: Nothing. Can see where you stand this sprint, I guess.
  open "https://razorpay.atlassian.net/secure/Dashboard.jspa?selectPageId=10103"
}

# Creates a Luhn-valid 16-digit card number from a given prefix
# This took 45 minutes but by God it was worth it
#
# Usage:
# card 219219
# > 5192190000000006
function card() {
  ruby -e "puts $1.to_s.ljust(16,'0').to_i+$1.to_s.ljust(15,'0').split('').map(&:to_i)
  .each_with_index.map{|x,i|(2-i%2)*x}.map{|i|(i/10+1)%2*i+(i/10)*i.to_s
  .split('').map(&:to_i).inject(:+)}.inject(:+)*9%10"
}

# God knows if this works
function concierge() {
  curl --header "Cookie: $CONCIERGE_COOKIE" \
       --data "rule_type=https&access=1&email=&expiry=21600&_token=$CONCIERGE_TOKEN" \
       'https://concierge.razorpay.com/manage/sg-53c6323a'
}

#reach office and be lazy immediately
function gorazorpay_gogogo(){
  gocodebase

  #run tests in new terminal window
  # osascript -e '
  # tell application "Terminal"
  #   do script "cd ~/workplace/razorpay/api; phpunit;"
  # end tell '

  chrome 'https://mail.google.com/mail/u/1/#inbox' \
      'https://github.com/razorpay/api/pulls' \
      'https://splunk-mumbai.razorpay.com/en-US/app/search/api_errors?earliest=0&latest='

  open_working

  open /Applications/Slack.app
  open /Applications/Spotify.app
  open /Applications/Franz.app
}

# Nonsense that doesn't really work
#
# update_working() {
#   WHAT_IM_WORKING_ON=()
#   while read -r line; do WHAT_IM_WORKING_ON+=($line); done < ~/.pulls
# }
# WHAT_IM_WORKING_ON=()
# update_working
# working() {
#   echo $1 >> ~/.pulls
#   sort -u ~/.pulls > ~/.pulls.tmp
#   cat ~/.pulls.tmp > ~/.pulls
#   rm ~/.pulls.tmp
#   update_working
# }
# notworking() {
#   sed '/$1/d' ~/.pulls > ~/.pulls.tmp
#   cat ~/.pulls.tmp > ~/.pulls
#   rm ~/.pulls.tmp
#   update_working
# }
# open_working() {
#   for t in "${WHAT_IM_WORKING_ON[@]}"
#   do
#     chrome "https://github.com/razorpay/api/pull/$t"
#   done
# }

#!/bin/sh
#
# Git related scripts and aliases go here

# https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
source_if ~/.git-completion.bash

#######
# Github PAT
# Moved to .vars

alias gs='git status'
alias GS='git status'
alias gd='git diff'
alias gdc='git diff --cached'
alias ga='git add'
alias gl='git log'
alias glp="git log --pretty=format:'%h - %ad - %an - %s' --date=short"
alias gb='git branch'
alias gcm='git commit -m'
alias gco='git checkout'
alias gst='git stash'
alias gp='git pull'
alias gpom='git pull origin master'
alias gmm='git merge master'

# Makes my git prompt beautiful
function is_git_dir() {
  return $(git rev-parse 2>/dev/null 1>&2)
}
function git_branch() {
  git rev-parse --abbrev-ref HEAD 2> /dev/null
}
function gpo() {
  CURRENT_BRANCH=$(git_branch)
  git push origin $CURRENT_BRANCH
  listen_for_wercker_build $CURRENT_BRANCH
}
function gpl() {
  CURRENT_BRANCH=$(git_branch)
  git pull origin $CURRENT_BRANCH
}
function gpo_force() {
  CURRENT_BRANCH=$(git_branch)
  echolor yellow "WARNING: You're sure, right?"
  confirm && git push origin $CURRENT_BRANCH --force
  listen_for_wercker_build $CURRENT_BRANCH
}

function git_branch_paran() {
  is_git_dir && echo "(`git_branch`)"
}
function get_color_code() {
  color_code='32'
  is_git_dir && new_files=$(git ls-files --others --exclude-standard | wc -l)
  if [[ $new_files -ne 0 ]]
  then
    color_code='33'
  fi
  is_git_dir && git diff-index --quiet HEAD --
  files_changed=$?
  if [[ $files_changed -eq 1 ]]
  then
    color_code='31'
  fi
  echo $color_code
}
function git_prompt(){
  color_code=$(get_color_code)
  PS1="\[\033[01;34m\]\u\[\033[01;39m\]@\h\[\033[01;${color_code}m\] \W $(git_branch_paran)\[\033[00m\] > "
}
export PROMPT_COMMAND="${PROMPT_COMMAND};git_prompt"

# Git clone, and then cd into project directory
function gcl() {
  git clone "$1" && cd "$(basename "$1" | cut -f 1 -d '.')"
}

# Git checkout by date, instead of commit
# Usage: gco_date "2016-12-31"
function gco_date() {
  if [[ $# -ne 1 ]]
  then
    echo "Usage: gco_date 2017-12-31"
  else
    git checkout `git rev-list -n 1 --before="$1" master`
  fi
}

# Only run this for small PRs
#
# Usage:
# Checkout to the branch that's had its PR outdated.
# Call function and watch for conflicts.
# Confirm when prompted
function git_rebase_force() {
  if [[ $# -eq 1 ]]
  then
    CURRENT_BRANCH=$(git_branch)
    echo 'Stashing changes'
    git stash
    git checkout $1
    git_rebase_force
    git checkout $CURRENT_BRANCH
    git stash pop
  else
    TARGET_BRANCH=$(git_branch)
    git checkout master
    if [ $(git rev-parse HEAD) == $(git ls-remote origin master | cut -f1) ]
    then
      echo 'Master is already up-to-date'
    else
      echo 'Pulling latest changes'
      git pull origin master
      echo 'Master updated'
    fi
    git checkout $TARGET_BRANCH
    echo "Rebasing $TARGET_BRANCH"
    git rebase master
    echo 'Branch rebased'
    echolor 'WARNING: Force pushing is dangerous, and this script'\
            "doesn't bother checking if the rebase went as expected."
    confirm && git push origin $TARGET_BRANCH --force
    listen_for_wercker_build $TARGET_BRANCH
  fi
}

# Merge a PR on Github
#
# Usage:
# merge 7636
# merge 7636 rebase
# merge 7636 squash
#
function merge() {
  merge_method='merge'
  if [[ $# -eq 2 ]]
  then
    merge_method=$2
  fi
  curl -s -X PUT \
       -H "Authorization: token $GUT_TOKEN" \
       -H "Content-Type: application/json" \
       -d "{\"merge_method\":\"$merge_method\"}" \
       "https://api.github.com/repos/$GUT_DEFAULT_OWNER/$GUT_DEFAULT_REPO/pulls/$1/merge" | jq
}

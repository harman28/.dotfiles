#!/bin/sh
#
# Git related scripts and aliases go here

# https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
source_if ~/.git-completion.bash

#######
# Github PAT
# Moved to .vars

alias gs='git status'
alias GS='git status'
alias gd='git diff'
alias gdc='git diff --cached'
alias ga='git add'
alias gl='git log'
alias glp="git log --pretty=format:'%h - %ad - %an - %s' --date=short"
alias gb='git branch'
alias gcm='git commit -m'
alias gco='git checkout'
alias gstash='git stash'
alias gp='git pull'
alias gpom='git pull origin master'
alias gmm='git merge master'

# Makes my git prompt beautiful
function is_git_dir() {
  return $(git rev-parse 2>/dev/null 1>&2)
}
function git_branch() {
  git rev-parse --abbrev-ref HEAD 2> /dev/null
}
alias gpo="git push origin $(git_branch)"
function git_branch_paran() {
  is_git_dir && echo "(`git_branch`)"
}
function get_color_code() {
  color_code='32'
  is_git_dir && new_files=$(git ls-files --others --exclude-standard | wc -l)
  if [[ $new_files -ne 0 ]]
  then
    color_code='33'
  fi
  is_git_dir && git diff-index --quiet HEAD --
  files_changed=$?
  if [[ $files_changed -eq 1 ]]
  then
    color_code='31'
  fi
  echo $color_code
}
function prompt(){
  color_code=$(get_color_code)
  PS1="\[\033[01;34m\]\u\[\033[01;37m\]@\h\[\033[01;${color_code}m\] \W $(git_branch_paran)\[\033[00m\] > "
}
export PROMPT_COMMAND=prompt

# Git clone, and then cd into project directory
function gcl() {
  git clone "$1" && cd "$(basename "$1" | cut -f 1 -d '.')"
}

# Git checkout by date, instead of commit
# Usage: gco_date "2016-12-31"
function gco_date() {
  git checkout `git rev-list -n 1 --before="$1" master`
}

# Only run this for small PRs
function git_rebase_force() {
  BRANCH=$(git_branch)
  git checkout master
  echo "Pulling latest changes"
  git pull origin master
  echo "Master updated"
  git checkout $BRANCH
  echo "Rebasing branch"
  git rebase master
  echo "Branch rebased"
  echo "WARNING: Force pushing is dangerous, and this script"\
       "doesn't bother checking if the rebase went as expected."
  confirm && git push origin $BRANCH --force
}

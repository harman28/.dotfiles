#!/bin/sh
#
# Small changes that make typical Unix use slightly easier, go here.

#Terminal be pretty one day
export CLICOLOR=1
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx

# I can think of no reason why this should be a small number
export HISTSIZE=999999999999999999999999
export HISTFILESIZE=999999999999999999999999
export HISTTIMEFORMAT="%d/%m/%y %T "
export HISTCONTROL=ignoreboth

export GREP_COLOR='1;33'

# Use these to colour output
COLOUR_CODE_BLACK='\033[0;30m'
COLOUR_CODE_BLUE='\033[0;34m'
COLOUR_CODE_BROWN='\033[0;33m'
COLOUR_CODE_GRAY='\033[0;37m'
COLOUR_CODE_GREEN='\033[0;32m'
COLOUR_CODE_PURPLE='\033[0;35m'
COLOUR_CODE_RED='\033[0;31m'
COLOUR_CODE_WHITE='\033[1;37m'
COLOUR_CODE_YELLOW='\033[1;33m'
COLOUR_CODE_NC='\033[0m'

# Uses above codes to colour things more easily
# Replacement for echo, first arg is the colour
# Usage:
# echolor yellow "this is a gentle warning"
# echolor red this is a warning
#
# UPDATE: Removed now, in favour of the gem:
# - https://rubygems.org/gems/echolor
# - https://github.com/harman28/echolor/
#
# function echolor() {
#   upcase=$(echo $1 | awk '{print toupper($0)}')
#   code="COLOUR_CODE_$upcase"
#   echo -e "${!code}${@:2}${COLOUR_CODE_NC}"
# }

#
# Usage:
# indexed_array_contains $needle "${haystack[@]}"
# if [[ "$?" == 0 ]]; then
#   do_contains_thing
# else
#   do_other_thing
# fi
#
# Source: https://stackoverflow.com/a/8574392/5612201
#
function indexed_array_contains() {
  local e match="$1"
  shift
  for e; do
    [[ "$e" == "$match" ]] && return 0
  done
  return 1
}

#
# Usage:
# if ! associative_array_contains key in array; then
#   echo "No such array element"
# fi
#
# Source: https://stackoverflow.com/a/13221491/5612201
#
function associative_array_contains(){
  if [ "$2" != 'in' ]; then
    echo "Incorrect usage."
    echo "Correct usage: exists {key} in {array}"
    return
  fi
  eval '[ ${'$3'[$1]+muahaha} ]'
}


# How  did anyone function without this?
alias diff='colordiff'

# Ruby inline
alias rube="ruby -e"

# Milestones for quick queries.
# There's definitely some cool way of doing this
# using bash date, but I haven't read up on it yet.
function now() {
  ruby -e "
    require 'date';

    class String
      def bold;   \"\e[1m#{self}\e[22m\" end
      def italic; \"\e[3m#{self}\e[23m\" end
    end

    today=DateTime.now;
    puts 'Now: '
    puts today.to_time.to_s.italic, today.to_time.to_i.to_s.bold
    puts
    today=DateTime.new(today.year, today.month, today.day, 0, 0, 0, today.zone)
    print 'This day: #'
    puts today.yday
    puts today.to_time.to_s.italic, today.to_time.to_i.to_s.bold
    puts
    week=(today-today.wday).next_day
    print 'This week: #'
    puts today.cweek
    puts week.to_time.to_s.italic, week.to_time.to_i.to_s.bold
    puts
    month=(today-today.day).next_day
    print 'This month: #'
    puts today.month
    puts month.to_time.to_s.italic, month.to_time.to_i.to_s.bold
    puts
    year=(today-today.yday).next_day
    print 'This year: #'
    puts today.year
    puts year.to_time.to_s.italic, year.to_time.to_i.to_s.bold
  "
}

# The Nesbot Carbon constructor uses a bunch of fancy parsers,
# allowing a lot of natural-language-to-timestamp conversions.
# Exploiting that here for a super easy CLI epoch time converter.
# Also copies the unix timestamp onto clipboard.
#
# Dependency:
# Assumes you used composer to install carbon globally
# > composer global require nesbot/carbon
#
# Usage:
#
# > carbon 2 weeks ago
# 2019-05-22 15:13:57
# 1558518237
#
# > carbon last day of nov 2019
# 2019-11-30 00:00:00
# 1575052200
#
# > carbon next wednesday noon
# 2019-06-12 12:00:00
# 1560321000
#
function carbon() {
  php -r "
    require '$HOME/.composer/vendor/autoload.php';
    echo \"\e[3m\" . (new Carbon\Carbon('$*', 'Asia/Kolkata')) . \"\e[23m\" . PHP_EOL;
    echo \"\e[1m\" . (new Carbon\Carbon('$*', 'Asia/Kolkata'))->getTimestamp() . \"\e[23m\" . PHP_EOL;
  " | tee /dev/tty | tail -n 1 | cut -b5-14 | tr -d '\n' | pbcopy
}

# Easiest way to get a running time UI
function timestream() {
  while true; do
    sleep 1;
    date;
  done
}

# Verbose counter. Useful mostly with other commands meant to be delayed.
#
# Eg. coundown $((30*60)) && notify "post another question on #quiz"
function countdown() {
  for i in $(seq $1 1); do
    echo $i
    sleep 1
  done
}

# Using countdown to implement basic pomodoro
function pomodoro() {
  CMD='countdown'
  if [ "$1" == "-s" ]; then
    CMD='sleep'
  fi
  while true; do
    for i in $(seq 1 3); do
      # Work for 25 minutes
      notify 'Work!' '25 minutes'
      $CMD $((25*60))
      # Break for 5 minutes
      notify 'Short break!' '5 minutes'
      $CMD $((5*60))
    done
    # Work for 25 minutes
    notify 'Work!' '25 minutes'
    $CMD $((25*60))
    # Break for 15 minutes
    notify 'Long break!' '15 minutes'
    $CMD $((15*60))
  done
}

# unix coin toss
function toss() {
  FLIP=$(($(($RANDOM%10))%2))
  HEADS_VAR=${1:-heads}
  TAILS_VAR=${2:-tails}
  if [ $FLIP -eq 1 ]; then
    echo $HEADS_VAR
  else
    echo $TAILS_VAR
    # This is so you can use toss in piped commands
    # Eg. toss && echo 'print this only half the time'
    return 1
  fi
}

# Stuff I don't want showing up in the git repo
alias rc='sublime ~/.bashrc'

# If there's a .bashrc in the current directory, grab it
function pick_bashrc_if_available(){
  if [[ "$bashrc" != "$PWD" && "$PWD" != "$HOME" && -e .bashrc ]]; then
    bashrc="$PWD"
    . .bashrc
  fi
}
# It looks weird that we're completely replacing the prompt instead of just appending to it,
# but that's because the default value holds update_terminal_cwd, which I just don't like
# export PROMPT_COMMAND="${PROMPT_COMMAND};pick_bashrc_if_available"
export PROMPT_COMMAND=pick_bashrc_if_available

# Look up IPs easily
function ip(){
  curl -X GET "https://ipinfo.io/$1"
  echo
}
function lookup(){
  whois $1
  ip $1
}

# Wrapper to fetch env variables.
# It's annoying when a script fails because a var isn't set, since these errors
# are usually silent. This just puts out a warning when accessing an empty var.
#
# Usage:
# var=$(envar VARIABLE_NAME)
function envar() {
  var=${!1}
  if [ -z $var ]; then
    echolor red "WARNING: Env var $1 hasn't been set"
  fi
  echo $var
}

function random_word() {
  WORDFILE="/usr/share/dict/words"
  shuf -n 1 $WORDFILE
}

# If you're checking path for something, I suspect
# what you really want to do is copy it somewhere else.
# Let me strip that newline for you.
function path(){
  if [[ $# -eq 0 ]]; then
    pwd | tee /dev/tty | tr -d '[:space:]' | pbcopy
  else
    realpath $1 | tee /dev/tty | tr -d '[:space:]' | pbcopy
  fi
}

# -.-
alias CD='cd'

# Make dir and cd into it. Looks like gaali but isn't.
function mkcd () { mkdir -p "$@" && cd "$@"; }

# Bash doesn't have a yield, but this is close enough
# Little macro that checks for confirmation before executing something
# Usage:
# echolor "Warning: you are doing dangerous_thing"
# confirm && do_dangerous_thing
function confirm() {
  read -p "Continue? <Y/N> " input
  response=$(echo -n "$input" | awk '{print tolower($0)}')
  if [[ $response != "y" && $response != "yes" ]]; then
    echo "Lol okay."
    false
  fi
}

# Gently murder the nice apps
function close(){
  if [[ $# -eq 0 ]]; then
    echo "Usage: ${FUNCNAME[0]} [PATTERN]"
  elif [[ -n $(pgrep $1) ]]; then
    kill $(pgrep $1); echo "Quit $1."
  else
    echo "No instances of $1 open."
  fi
}

# Brutally extinguish all processes that match a pattern
function hunt(){
  if [[ $# -eq 0 ]]; then
    echo "Usage: ${FUNCNAME[0]} [PATTERN]"
  elif [[ -n $(pgrep $1) ]]; then
    sudo kill -9 $(pgrep $1); echo "$1 has been taken care of."
  else
    echo 'ERROR: No matching processes. What are you hunting?'
  fi
}

# Find out who you want to kill
function wtf() {
  WTF_LIMIT=10
  if [[ $# -eq 1 ]]; then
    WTF_LIMIT=$1
  fi
  echo "USER               PID  %CPU %MEM STARTED      TIME COMMAND"
  ps ax -o user,pid,%cpu,%mem,start,time,command | sed 1d | sort -nrk 4 | head -n $WTF_LIMIT | cut -c -$COLUMNS
}

# Host directories
alias webserver='python -m SimpleHTTPServer'

# For general grouping. Ideally this should be a Sublime plugin, but I don't
# know how to write one yet, so this is a good temporary solution. Copy the
# text you want to group, and execute this. It sources from clipboard.
alias group='pbpaste | sort | uniq -c | sort -r'
